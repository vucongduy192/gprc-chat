// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: greet.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProtocServiceClient is the client API for ProtocService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProtocServiceClient interface {
	Greet(ctx context.Context, in *GreetRequest, opts ...grpc.CallOption) (*GreetResponse, error)
	GreetServerStream(ctx context.Context, in *ServerStreamGreetRequest, opts ...grpc.CallOption) (ProtocService_GreetServerStreamClient, error)
	GreetClientStream(ctx context.Context, opts ...grpc.CallOption) (ProtocService_GreetClientStreamClient, error)
	GreetBiDirectionalStream(ctx context.Context, opts ...grpc.CallOption) (ProtocService_GreetBiDirectionalStreamClient, error)
}

type protocServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProtocServiceClient(cc grpc.ClientConnInterface) ProtocServiceClient {
	return &protocServiceClient{cc}
}

func (c *protocServiceClient) Greet(ctx context.Context, in *GreetRequest, opts ...grpc.CallOption) (*GreetResponse, error) {
	out := new(GreetResponse)
	err := c.cc.Invoke(ctx, "/proto.ProtocService/Greet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocServiceClient) GreetServerStream(ctx context.Context, in *ServerStreamGreetRequest, opts ...grpc.CallOption) (ProtocService_GreetServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProtocService_ServiceDesc.Streams[0], "/proto.ProtocService/GreetServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &protocServiceGreetServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProtocService_GreetServerStreamClient interface {
	Recv() (*ServerStreamGreetResponse, error)
	grpc.ClientStream
}

type protocServiceGreetServerStreamClient struct {
	grpc.ClientStream
}

func (x *protocServiceGreetServerStreamClient) Recv() (*ServerStreamGreetResponse, error) {
	m := new(ServerStreamGreetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *protocServiceClient) GreetClientStream(ctx context.Context, opts ...grpc.CallOption) (ProtocService_GreetClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProtocService_ServiceDesc.Streams[1], "/proto.ProtocService/GreetClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &protocServiceGreetClientStreamClient{stream}
	return x, nil
}

type ProtocService_GreetClientStreamClient interface {
	Send(*ClientStreamGreetRequest) error
	CloseAndRecv() (*ClientStreamGreetResponse, error)
	grpc.ClientStream
}

type protocServiceGreetClientStreamClient struct {
	grpc.ClientStream
}

func (x *protocServiceGreetClientStreamClient) Send(m *ClientStreamGreetRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *protocServiceGreetClientStreamClient) CloseAndRecv() (*ClientStreamGreetResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ClientStreamGreetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *protocServiceClient) GreetBiDirectionalStream(ctx context.Context, opts ...grpc.CallOption) (ProtocService_GreetBiDirectionalStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProtocService_ServiceDesc.Streams[2], "/proto.ProtocService/GreetBiDirectionalStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &protocServiceGreetBiDirectionalStreamClient{stream}
	return x, nil
}

type ProtocService_GreetBiDirectionalStreamClient interface {
	Send(*BiDirectionalGreetRequest) error
	Recv() (*BiDirectionalGreetResponse, error)
	grpc.ClientStream
}

type protocServiceGreetBiDirectionalStreamClient struct {
	grpc.ClientStream
}

func (x *protocServiceGreetBiDirectionalStreamClient) Send(m *BiDirectionalGreetRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *protocServiceGreetBiDirectionalStreamClient) Recv() (*BiDirectionalGreetResponse, error) {
	m := new(BiDirectionalGreetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProtocServiceServer is the server API for ProtocService service.
// All implementations must embed UnimplementedProtocServiceServer
// for forward compatibility
type ProtocServiceServer interface {
	Greet(context.Context, *GreetRequest) (*GreetResponse, error)
	GreetServerStream(*ServerStreamGreetRequest, ProtocService_GreetServerStreamServer) error
	GreetClientStream(ProtocService_GreetClientStreamServer) error
	GreetBiDirectionalStream(ProtocService_GreetBiDirectionalStreamServer) error
	mustEmbedUnimplementedProtocServiceServer()
}

// UnimplementedProtocServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProtocServiceServer struct {
}

func (UnimplementedProtocServiceServer) Greet(context.Context, *GreetRequest) (*GreetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Greet not implemented")
}
func (UnimplementedProtocServiceServer) GreetServerStream(*ServerStreamGreetRequest, ProtocService_GreetServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GreetServerStream not implemented")
}
func (UnimplementedProtocServiceServer) GreetClientStream(ProtocService_GreetClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GreetClientStream not implemented")
}
func (UnimplementedProtocServiceServer) GreetBiDirectionalStream(ProtocService_GreetBiDirectionalStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GreetBiDirectionalStream not implemented")
}
func (UnimplementedProtocServiceServer) mustEmbedUnimplementedProtocServiceServer() {}

// UnsafeProtocServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProtocServiceServer will
// result in compilation errors.
type UnsafeProtocServiceServer interface {
	mustEmbedUnimplementedProtocServiceServer()
}

func RegisterProtocServiceServer(s grpc.ServiceRegistrar, srv ProtocServiceServer) {
	s.RegisterService(&ProtocService_ServiceDesc, srv)
}

func _ProtocService_Greet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocServiceServer).Greet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProtocService/Greet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocServiceServer).Greet(ctx, req.(*GreetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocService_GreetServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServerStreamGreetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProtocServiceServer).GreetServerStream(m, &protocServiceGreetServerStreamServer{stream})
}

type ProtocService_GreetServerStreamServer interface {
	Send(*ServerStreamGreetResponse) error
	grpc.ServerStream
}

type protocServiceGreetServerStreamServer struct {
	grpc.ServerStream
}

func (x *protocServiceGreetServerStreamServer) Send(m *ServerStreamGreetResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ProtocService_GreetClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProtocServiceServer).GreetClientStream(&protocServiceGreetClientStreamServer{stream})
}

type ProtocService_GreetClientStreamServer interface {
	SendAndClose(*ClientStreamGreetResponse) error
	Recv() (*ClientStreamGreetRequest, error)
	grpc.ServerStream
}

type protocServiceGreetClientStreamServer struct {
	grpc.ServerStream
}

func (x *protocServiceGreetClientStreamServer) SendAndClose(m *ClientStreamGreetResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *protocServiceGreetClientStreamServer) Recv() (*ClientStreamGreetRequest, error) {
	m := new(ClientStreamGreetRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ProtocService_GreetBiDirectionalStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProtocServiceServer).GreetBiDirectionalStream(&protocServiceGreetBiDirectionalStreamServer{stream})
}

type ProtocService_GreetBiDirectionalStreamServer interface {
	Send(*BiDirectionalGreetResponse) error
	Recv() (*BiDirectionalGreetRequest, error)
	grpc.ServerStream
}

type protocServiceGreetBiDirectionalStreamServer struct {
	grpc.ServerStream
}

func (x *protocServiceGreetBiDirectionalStreamServer) Send(m *BiDirectionalGreetResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *protocServiceGreetBiDirectionalStreamServer) Recv() (*BiDirectionalGreetRequest, error) {
	m := new(BiDirectionalGreetRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProtocService_ServiceDesc is the grpc.ServiceDesc for ProtocService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProtocService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ProtocService",
	HandlerType: (*ProtocServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Greet",
			Handler:    _ProtocService_Greet_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GreetServerStream",
			Handler:       _ProtocService_GreetServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GreetClientStream",
			Handler:       _ProtocService_GreetClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GreetBiDirectionalStream",
			Handler:       _ProtocService_GreetBiDirectionalStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "greet.proto",
}
